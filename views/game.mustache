<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Minesweeper game {{id}}</title>
        <link rel="stylesheet" href="/css/game.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.0/socket.io.js"></script>
    </head>
    <body>
        <table id="game">

        </table>
        <script>
let game_id = "{{id}}";
let game = {};
let field = document.getElementById("game");
const socket = io();
socket.on('discovered', (discovered) => {
    for (let d of discovered) {
        let {x, y, cell} = d;
        console.log(`### CELL DISCOVERED at ${x}, ${y}`, cell);
        let field_cell = game.table[y][x];
        let field_elem = document.querySelector(`td[data-x="${x}"][data-y="${y}"]`);
        if (cell.mine) {
            let celem = field_elem.cloneNode(false);
            let img = document.createElement("img");
            img.src = "/img/mine.png";
            celem.appendChild(img);
            celem.addEventListener('click', handle_left_click);
            celem.addEventListener('contextmenu', handle_right_click);
            field_elem.parentNode.replaceChild(celem, field_elem);
            return;
        }
        field_elem.innerText = cell.neighbors;
        game.table[y][x] = cell;
    }
});
socket.on('flagged', (flagged) => {
    for (let f of flagged) {
        let {x, y, cell} = f;
        console.log(`!!! CELL FLAGGED at ${x}, ${y}: ${cell}`);
        let field_cell = game.table[y][x];
        let field_elem = document.querySelector(`td[data-x="${x}"][data-y="${y}"]`);
        let celem = field_elem.cloneNode(false);
        if (cell.flagged) {
            let img = document.createElement("img");
            img.src = "/img/flag.png";
            celem.appendChild(img);
            celem.addEventListener('click', handle_left_click);
            celem.addEventListener('contextmenu', handle_right_click);
        }
        field_elem.parentNode.replaceChild(celem, field_elem);
        game.table[y][x] = cell;
    }
});
socket.on('game over', () => {
    console.log("GAME OVER");
    //field.innerHTML = "GAME OVER";
});
socket.on('game params', (params) => {
    let {width, height} = params;
    console.log(`GAME PARAMS ${width}x${height}`, params);
    game.width = width;
    game.height = height;
    game.table = [];
    for (let y = 0; y < height; y++) {
        game.table[y] = [];
        let row = document.createElement("tr");
        for (let x = 0; x < width; x++) {
            let cell = document.createElement("td");
            game.table[y][x] = {discovered: false};
            row.appendChild(cell);
            cell.setAttribute("data-x", x);
            cell.setAttribute("data-y", y);
            cell.addEventListener('click', handle_left_click);
            cell.addEventListener('contextmenu', handle_right_click);
        }
        field.appendChild(row);
    }
});

socket.emit('join', game_id);

function handle_left_click(event) {
    let x = parseInt(this.getAttribute("data-x"));
    let y = parseInt(this.getAttribute("data-y"));
    if (game.table[y][x].discovered) return;
    switch (event.button) {
        case 0: // "main" button, usually left
             socket.emit('discover', {x, y});
            break;
    }
    event.preventDefault();
}
function handle_right_click(event) {
    let x = parseInt(this.getAttribute("data-x"));
    let y = parseInt(this.getAttribute("data-y"));
    if (game.table[y][x].discovered) return;
    socket.emit('flag', {x, y});
    event.preventDefault();
}
        </script>
    </body>
</html>
